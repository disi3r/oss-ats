generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

enum UserRole {
  RECRUITER
  MANAGER
  INTERVIEWER
}

enum CandidateStatus {
  BACKLOG
  PROCESSING
  ACTIVE
  ON_HOLD
  HIRED
  REJECTED
}

model User {
  id    String   @id @default(cuid())
  name  String
  email String   @unique
  role  UserRole @default(RECRUITER)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ownedProcesses Process[] @relation("ProcessOwner")
}

model StrategicContext {
  id                Int      @id @default(1)
  strategicVision   String
  companyMission    String
  coreValues        String[]
  communicationTone String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("strategic_contexts")
}

model Candidate {
  id         String          @id @default(cuid())
  fullName   String
  title      String?
  email      String?
  phone      String?
  location   String?
  resumeText String?
  cvFilePath String?
  status     CandidateStatus @default(BACKLOG)

  currentProcessId String?
  currentProcess   Process? @relation(fields: [currentProcessId], references: [id])

  history  Json @default("[]")
  metadata Json @default("{}")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  assignments       ProcessCandidate[]
  hiredForProcesses Process[]          @relation("HiredCandidate")
}

model Process {
  id             String   @id @default(cuid())
  title          String
  jobDescription String?
  stage          Int      @default(0)

  ownerId String
  owner   User    @relation("ProcessOwner", fields: [ownerId], references: [id])

  collaboratorIds String[] @default([])

  interviewPlan       Json @default("[]")
  candidatesInProcess Json @default("{}")
  interviewFeedback   Json @default("{}")

  hiredCandidateId String?
  hiredCandidate   Candidate? @relation("HiredCandidate", fields: [hiredCandidateId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  candidateAssignments ProcessCandidate[]
}

model ProcessCandidate {
  id String @id @default(cuid())

  processId String
  process   Process @relation(fields: [processId], references: [id])

  candidateId String
  candidate   Candidate @relation(fields: [candidateId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  metadata Json @default("{}")
}
